//@ts-ignore
import type * as SRVAPI from "gen/srv/api/srv";
import { Server, WebSocketHandler } from "bun";
import prisma from "./prisma";
import { PrismaExtend } from "./prisma.ext";

declare global {
  type Api = typeof SRVAPI;
  type ApiName = keyof Api;
  const api: { [k in ApiName]: Awaited<Api[k]["handler"]>["_"]["api"] } & {
    _raw: any;
  };
  const db: prisma.PrismaClient & PrismaExtend;
  interface PushNotificationSchema {
    title?: string;
    subtitle?: string;
    body?: string;
    id: string;
    tag?: string;
    badge?: number;
    notification?: any;
    data: any;
    click_action?: string;
    link?: string;
    group?: string;
    groupSummary?: boolean;
  }
  interface ActionPerformed {
    actionId: string;
    inputValue?: string;
    notification: PushNotificationSchema;
  }
  const notif: {
    loaded: (send: (data: any) => void) => void;
    onReceive: (notif: PushNotificationSchema) => void | Promise<void>;
    onTap: (notif: null | ActionPerformed) => void | Promise<void>;
  };

  type PrasiServer = {
    ws?: WebSocketHandler<{ url: string }>;
    http: (arg: {
      url: { raw: URL; pathname: string };
      req: Request;
      server: Server;
      mode: "dev" | "prod";
      handle: (req: Request) => Promise<Response>;
      index: { head: string[]; body: string[]; render: () => string };
      prasi: { page_id?: string; params?: Record<string, any> };
    }) => Promise<Response>;
    init: (arg: { port?: number }) => Promise<void>;
  };
}
