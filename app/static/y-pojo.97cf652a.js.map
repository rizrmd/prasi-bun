{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCCA,EAAA,MAAA,CAAA,EAAA,aAAA,IAAgB,GA8BhB,EAAA,MAAA,CAAA,EAAA,aAAA,IAAgB,GA/BhB,IAAA,EAAA,EAAA,OACO,SAAS,EAAW,CAAO,CAAE,CAAM,EACtC,IAAM,EAAc,EAAkB,GACtC,GAAI,CACA,IAAI,EAAa,EAAO,WAAW,CAAC,IAAI,AAC5C,CACA,MAAO,EAAG,CACN,EAAa,WACjB,CACA,GAAI,AAAe,UAAf,GAA2B,AAAc,SAAd,EAI3B,OADe,AADM,EACO,MAAM,EAAI,AAFlB,EAE8B,MAAM,EAAI,AAFxC,EAEoD,KAAK,CAAC,CAAC,EAAG,IAAM,EAAW,AAD9E,EAC2F,GAAG,CAAC,GAAI,AAFpG,CAE+G,CAAC,EAAE,GAGrI,GAAI,AAAe,QAAf,GAAyB,AAAc,UAAd,EAa9B,OAAO,IAAW,CAboC,EAGtD,IAAI,EAAiB,EACrB,IAAK,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","sources":["<anon>","../../node_modules/y-pojo/dist/y-pojo.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"8Vh2H\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"deepEquals\", ()=>deepEquals);\nparcelHelpers.export(exports, \"syncronize\", ()=>syncronize);\nvar _yjs = require(\"yjs\");\nfunction deepEquals(managed, target) {\n    const managedType = detectManagedType(managed);\n    try {\n        var targetType = target.constructor.name;\n    } catch (e) {\n        targetType = \"undefined\";\n    }\n    if (managedType == \"YArray\" && targetType == \"Array\") {\n        const targetArray = target;\n        const managedArray = managed;\n        const result = managedArray.length == targetArray.length && targetArray.every((t, i)=>deepEquals(managedArray.get(i), targetArray[i]));\n        return result;\n    } else if (managedType == \"YMap\" && targetType == \"Object\") {\n        const targetMap = target;\n        const managedMap = managed;\n        let targetKeyCount = 0;\n        for(let targetKey in targetMap){\n            targetKeyCount++;\n            if (!deepEquals(managedMap.get(targetKey), targetMap[targetKey])) return false;\n        }\n        return targetKeyCount == Array.from(managedMap.keys()).length;\n    } else return target === managed;\n}\nfunction syncronize(managedObj, targetObj) {\n    let changed = false;\n    const managedType = detectManagedType(managedObj);\n    switch(managedType){\n        case \"YArray\":\n            if (!Array.isArray(targetObj)) throw new Error(`Sync failed, ${targetObj} was not array`);\n            const managedArray = managedObj;\n            const targetArray = targetObj;\n            const outOfRange = Symbol();\n            let cursor = 0;\n            for(let i = 0; i < targetArray.length; i++){\n                let match = false;\n                const targetValue = targetArray[i];\n                const len = managedArray.length > targetArray.length ? managedArray.length : targetArray.length;\n                for(let j = cursor; !match && j < len; j++){\n                    const managedValue = j < managedArray.length ? managedArray.get(j) : outOfRange;\n                    const targetValue = i < targetArray.length ? targetArray[i] : outOfRange;\n                    if (deepEquals(managedValue, targetValue)) {\n                        for(let x = j - 1; x >= cursor; x--){\n                            changed = true;\n                            managedArray.delete(x);\n                        }\n                        const deletedCount = j - cursor;\n                        cursor = j + 1 - deletedCount;\n                        match = true;\n                    }\n                }\n                if (!match) {\n                    try {\n                        var childType = targetValue.constructor.name;\n                    } catch (e) {\n                        childType = \"undefined\";\n                    }\n                    const managedChild = cursor < managedArray.length ? managedArray.get(cursor) : \"undefined\";\n                    const managedType = detectManagedType(managedChild);\n                    // but if they're compatible types we should go deeper\n                    // there was no exact match in the list, so assume the immediately next object should be the match\n                    if (managedType == \"YMap\" && childType == \"Object\" || managedType == \"YArray\" && childType == \"Array\") syncronize(managedChild, targetValue);\n                    else managedArray.insert(cursor, [\n                        syncChild(targetValue)\n                    ]);\n                    cursor++;\n                    changed = true;\n                }\n            }\n            while(managedArray.length > targetArray.length){\n                changed = true;\n                managedArray.delete(targetArray.length);\n            }\n            break;\n        case \"YMap\":\n            if (targetObj.constructor.name !== \"Object\") throw new Error(`Sync failed, ${targetObj} was not object`);\n            const managedMap = managedObj;\n            const targetMap = targetObj;\n            for (const key of managedMap.keys()){\n                if (!(key in targetObj)) {\n                    // item's been removed from target\n                    managedMap.delete(key);\n                    changed = true;\n                    continue;\n                }\n                const managedChild = managedMap.get(key);\n                const targetChild = targetMap[key];\n                const managedType = detectManagedType(managedChild);\n                try {\n                    var childType = targetChild.constructor.name;\n                } catch (e) {\n                    childType = \"undefined\";\n                }\n                if (managedType == \"YMap\" && childType !== \"Object\" || managedType == \"YArray\" && childType !== \"Array\" || ![\n                    \"YMap\",\n                    \"YArray\"\n                ].includes(managedType) && managedType !== childType) {\n                    // this item has fundamentally changed, delete the existing record and recreate it in second pass\n                    managedMap.delete(key);\n                    changed = true;\n                } else if (managedType == \"YMap\" || managedType == \"YArray\") {\n                    // they match in types, so go deeper\n                    const childChanged = syncronize(managedChild, targetChild);\n                    changed || (changed = childChanged);\n                } else // they are not complex types so just assign it into the map\n                if (managedChild !== targetChild) {\n                    managedMap.set(key, targetChild);\n                    changed = true;\n                }\n            }\n            for(const key in targetMap)if (!managedMap.has(key)) {\n                const child = syncChild(targetMap[key]);\n                managedMap.set(key, child);\n                changed = true;\n            }\n            break;\n        default:\n            throw new Error(`can only iterate over Y.Map and Y.Array, got ${managedObj}`);\n    }\n    return changed;\n}\nfunction syncChild(child) {\n    try {\n        var childType = child.constructor.name;\n    } catch (e) {\n        childType = \"undefined\";\n    }\n    if (childType == \"Array\") {\n        const arr = new _yjs.Array();\n        syncronize(arr, child);\n        return arr;\n    } else if (childType == \"Object\") {\n        const map = new _yjs.Map();\n        syncronize(map, child);\n        return map;\n    } else return child;\n}\nfunction detectManagedType(managed) {\n    try {\n        if (managed.length !== undefined && managed.get !== undefined) return \"YArray\";\n        else if (managed.keys !== undefined && managed.get !== undefined) return \"YMap\";\n        else return managed.constructor.name;\n    } catch (e) {\n        return \"undefined\";\n    }\n}\n\n},{\"yjs\":\"80IRG\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"41Cak\"}]},[], null, \"parcelRequire2d1f\")\n\n//# sourceMappingURL=y-pojo.97cf652a.js.map\n","import * as Y from \"yjs\";\nexport function deepEquals(managed, target) {\n    const managedType = detectManagedType(managed);\n    try {\n        var targetType = target.constructor.name;\n    }\n    catch (e) {\n        targetType = \"undefined\";\n    }\n    if (managedType == \"YArray\" && targetType == \"Array\") {\n        const targetArray = target;\n        const managedArray = managed;\n        const result = managedArray.length == targetArray.length && targetArray.every((t, i) => deepEquals(managedArray.get(i), targetArray[i]));\n        return result;\n    }\n    else if (managedType == \"YMap\" && targetType == \"Object\") {\n        const targetMap = target;\n        const managedMap = managed;\n        let targetKeyCount = 0;\n        for (let targetKey in targetMap) {\n            targetKeyCount++;\n            if (!deepEquals(managedMap.get(targetKey), targetMap[targetKey])) {\n                return false;\n            }\n        }\n        return targetKeyCount == Array.from(managedMap.keys()).length;\n    }\n    else {\n        return target === managed;\n    }\n}\nexport function syncronize(managedObj, targetObj) {\n    let changed = false;\n    const managedType = detectManagedType(managedObj);\n    switch (managedType) {\n        case \"YArray\":\n            if (!Array.isArray(targetObj)) {\n                throw new Error(`Sync failed, ${targetObj} was not array`);\n            }\n            const managedArray = managedObj;\n            const targetArray = targetObj;\n            const outOfRange = Symbol();\n            let cursor = 0;\n            for (let i = 0; i < targetArray.length; i++) {\n                let match = false;\n                const targetValue = targetArray[i];\n                const len = (managedArray.length > targetArray.length) ? managedArray.length : targetArray.length;\n                for (let j = cursor; !match && j < len; j++) {\n                    const managedValue = (j < managedArray.length) ? managedArray.get(j) : outOfRange;\n                    const targetValue = (i < targetArray.length) ? targetArray[i] : outOfRange;\n                    if (deepEquals(managedValue, targetValue)) {\n                        for (let x = j - 1; x >= cursor; x--) {\n                            changed = true;\n                            managedArray.delete(x);\n                        }\n                        const deletedCount = j - cursor;\n                        cursor = j + 1 - deletedCount;\n                        match = true;\n                    }\n                }\n                if (!match) {\n                    try {\n                        var childType = targetValue.constructor.name;\n                    }\n                    catch (e) {\n                        childType = \"undefined\";\n                    }\n                    const managedChild = (cursor < managedArray.length) ? managedArray.get(cursor) : \"undefined\";\n                    const managedType = detectManagedType(managedChild);\n                    // but if they're compatible types we should go deeper\n                    // there was no exact match in the list, so assume the immediately next object should be the match\n                    if ((managedType == \"YMap\" && childType == \"Object\") ||\n                        (managedType == \"YArray\" && childType == \"Array\")) {\n                        syncronize(managedChild, targetValue);\n                    }\n                    else {\n                        managedArray.insert(cursor, [syncChild(targetValue)]);\n                    }\n                    cursor++;\n                    changed = true;\n                }\n            }\n            while (managedArray.length > targetArray.length) {\n                changed = true;\n                managedArray.delete(targetArray.length);\n            }\n            break;\n        case \"YMap\":\n            if (targetObj.constructor.name !== \"Object\") {\n                throw new Error(`Sync failed, ${targetObj} was not object`);\n            }\n            const managedMap = managedObj;\n            const targetMap = targetObj;\n            for (const key of managedMap.keys()) {\n                if (!(key in targetObj)) {\n                    // item's been removed from target\n                    managedMap.delete(key);\n                    changed = true;\n                    continue;\n                }\n                const managedChild = managedMap.get(key);\n                const targetChild = targetMap[key];\n                const managedType = detectManagedType(managedChild);\n                try {\n                    var childType = targetChild.constructor.name;\n                }\n                catch (e) {\n                    childType = \"undefined\";\n                }\n                if ((managedType == \"YMap\" && childType !== \"Object\") ||\n                    (managedType == \"YArray\" && childType !== \"Array\") ||\n                    (![\"YMap\", \"YArray\"].includes(managedType) && managedType !== childType)) {\n                    // this item has fundamentally changed, delete the existing record and recreate it in second pass\n                    managedMap.delete(key);\n                    changed = true;\n                }\n                else if (managedType == \"YMap\" || managedType == \"YArray\") {\n                    // they match in types, so go deeper\n                    const childChanged = syncronize(managedChild, targetChild);\n                    changed || (changed = childChanged);\n                }\n                else {\n                    // they are not complex types so just assign it into the map\n                    if (managedChild !== targetChild) {\n                        managedMap.set(key, targetChild);\n                        changed = true;\n                    }\n                }\n            }\n            for (const key in targetMap) {\n                if (!managedMap.has(key)) {\n                    const child = syncChild(targetMap[key]);\n                    managedMap.set(key, child);\n                    changed = true;\n                }\n            }\n            break;\n        default:\n            throw new Error(`can only iterate over Y.Map and Y.Array, got ${managedObj}`);\n    }\n    return changed;\n}\nfunction syncChild(child) {\n    try {\n        var childType = child.constructor.name;\n    }\n    catch (e) {\n        childType = \"undefined\";\n    }\n    if (childType == \"Array\") {\n        const arr = new Y.Array();\n        syncronize(arr, child);\n        return arr;\n    }\n    else if (childType == \"Object\") {\n        const map = new Y.Map();\n        syncronize(map, child);\n        return map;\n    }\n    else {\n        return child;\n    }\n}\nfunction detectManagedType(managed) {\n    try {\n        if (managed.length !== undefined && managed.get !== undefined) {\n            return \"YArray\";\n        }\n        else if (managed.keys !== undefined && managed.get !== undefined) {\n            return \"YMap\";\n        }\n        else {\n            return managed.constructor.name;\n        }\n    }\n    catch (e) {\n        return \"undefined\";\n    }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","deepEquals","syncronize","_yjs","managed","target","managedType","detectManagedType","targetType","constructor","e","managedArray","targetArray","every","t","targetKeyCount","targetKey","managedMap","targetMap","Array","from","keys","managedObj","targetObj","changed","isArray","outOfRange","Symbol","cursor","match","targetValue","len","j","delete","deletedCount","childType","managedChild","insert","syncChild","key","targetChild","includes","childChanged","set","has","child","arr","map","Map","undefined"],"version":3,"file":"y-pojo.97cf652a.js.map"}