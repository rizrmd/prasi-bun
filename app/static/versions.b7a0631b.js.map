{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,MCGI,E,I,E,E,kD,E,iB,C,GAEJ,EAAA,MAAA,CAAA,EAAA,0BAAA,IAAgB,GAMhB,EAAA,MAAA,CAAA,EAAA,yBAAA,IAAsB,GATtB,IAAM,EAAkB,IAGjB,SAAS,EACd,CAA8C,EAE9C,EAAe,CACjB,CAEO,eAAe,EAAuB,CAAe,EAC1D,IAAM,EAAW,MAAM,EAEjB,EACJ,AAAY,WAAZ,GAAwB,EAAS,MAAM,CAAG,EAAI,EAAS,OAAO,CAAC,GAC7D,GAAS,GACX,MAAM,EAAa,CAAQ,CAAC,EAAM,CAEtC,CAEA,eAAe,IACb,IAAM,EAAa,IAAI,gBACjB,EAAU,WAAW,IAAM,EAAW,KAAK,CAAC,WAAY,KAG9D,GAAI,CAEF,IAAM,EAAW,MAAM,MADX,wDACsB,CAAE,OAAQ,EAAW,MAAM,AAAC,GAC9D,GAAI,GAAY,EAAS,EAAE,CAAE,CAC3B,aAAa,GACb,IAAM,EAAW,AAAC,CAAA,MAAM,EAAS,IAAI,EAAA,EAAI,QAAQ,CAEjD,GAAI,GAAY,EAAS,MAAM,CAC7B,OAAO,CAEX,CACF,CAAE,MAAO,EAAK,CACZ,QAAQ,KAAK,CAAC,EAChB,CAGA,GAAI,CAEF,IAAI,EAAW,AAAC,CAAA,MAAM,MADV,2CACqB,IAAI,CAAC,AAAC,GAAM,EAAE,IAAI,GAAA,EAAK,QAAQ,CAChE,GAAI,GAEE,AADJ,CAAA,EAAW,OAAO,IAAI,CAAC,GAAU,OAAO,EAAxC,EACa,MAAM,CACjB,OAAO,CAGb,CAAE,MAAO,EAAK,CACZ,QAAQ,KAAK,CAAC,EAChB,CAEA,MAAM,AAAI,OACZ,C,E,C,iD,O,E,E,E,C,E","sources":["<anon>","src/utils/script/esbuild/versions.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"9cmYT\":[function(require,module,exports) {\n// This file manages the UI for the version picker in the top right corner\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"setReloadWorkerCallback\", ()=>setReloadWorkerCallback);\nparcelHelpers.export(exports, \"tryToSetCurrentVersion\", ()=>tryToSetCurrentVersion);\nconst versionsPromise = tryToFetchVersions();\nlet reloadWorker;\nfunction setReloadWorkerCallback(callback) {\n    reloadWorker = callback;\n}\nasync function tryToSetCurrentVersion(version) {\n    const versions = await versionsPromise;\n    const index = version === \"latest\" && versions.length ? 0 : versions.indexOf(version);\n    if (index >= 0) await reloadWorker(versions[index]);\n}\nasync function tryToFetchVersions() {\n    const controller = new AbortController();\n    const timeout = setTimeout(()=>controller.abort(\"Timeout\"), 5000);\n    // This is probably faster than the registry because it returns less data\n    try {\n        const url = \"https://data.jsdelivr.com/v1/package/npm/esbuild-wasm\";\n        const response = await fetch(url, {\n            signal: controller.signal\n        });\n        if (response && response.ok) {\n            clearTimeout(timeout);\n            const versions = (await response.json()).versions;\n            if (versions && versions.length) return versions;\n        }\n    } catch (err) {\n        console.error(err);\n    }\n    // Fall back to the npm registry if that service is down\n    try {\n        const url = \"https://registry.npmjs.org/esbuild-wasm\";\n        let versions = (await fetch(url).then((r)=>r.json())).versions;\n        if (versions) {\n            versions = Object.keys(versions).reverse();\n            if (versions.length) return versions;\n        }\n    } catch (err) {\n        console.error(err);\n    }\n    throw new Error();\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"4uUBn\"}]},[], null, \"parcelRequire2d1f\")\n\n//# sourceMappingURL=versions.b7a0631b.js.map\n","// This file manages the UI for the version picker in the top right corner\n\nconst versionsPromise = tryToFetchVersions();\nlet reloadWorker: (version: string) => Promise<Worker>;\n\nexport function setReloadWorkerCallback(\n  callback: (version: string) => Promise<Worker>\n): void {\n  reloadWorker = callback;\n}\n\nexport async function tryToSetCurrentVersion(version: string): Promise<void> {\n  const versions = await versionsPromise;\n\n  const index =\n    version === \"latest\" && versions.length ? 0 : versions.indexOf(version);\n  if (index >= 0) {\n    await reloadWorker(versions[index]);\n  }\n}\n\nasync function tryToFetchVersions(): Promise<string[]> {\n  const controller = new AbortController();\n  const timeout = setTimeout(() => controller.abort(\"Timeout\"), 5000);\n\n  // This is probably faster than the registry because it returns less data\n  try {\n    const url = \"https://data.jsdelivr.com/v1/package/npm/esbuild-wasm\";\n    const response = await fetch(url, { signal: controller.signal });\n    if (response && response.ok) {\n      clearTimeout(timeout);\n      const versions = (await response.json()).versions;\n\n      if (versions && versions.length) {\n        return versions;\n      }\n    }\n  } catch (err) {\n    console.error(err);\n  }\n\n  // Fall back to the npm registry if that service is down\n  try {\n    const url = \"https://registry.npmjs.org/esbuild-wasm\";\n    let versions = (await fetch(url).then((r) => r.json())).versions;\n    if (versions) {\n      versions = Object.keys(versions).reverse();\n      if (versions.length) {\n        return versions;\n      }\n    }\n  } catch (err) {\n    console.error(err);\n  }\n\n  throw new Error();\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","reloadWorker","parcelHelpers","defineInteropFlag","export","setReloadWorkerCallback","tryToSetCurrentVersion","versionsPromise","tryToFetchVersions","callback","version","versions","index","indexOf","controller","AbortController","timeout","setTimeout","abort","response","fetch","signal","ok","clearTimeout","json","console","error","then","r","keys","reverse"],"version":3,"file":"versions.b7a0631b.js.map"}