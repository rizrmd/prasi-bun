{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;kBAEe,CAAA,GAAA,cAAI,AAAD,EAAE;IAClB,KAAK;IACL,WAAW,CAAC,EAAE;QACZ,MAAM,IAAI,CAAA,GAAA,mBAAS,AAAD,EAAE,CAAA,GAAA,kBAAQ,AAAD,GAAG;QAC9B,CAAA,GAAA,gBAAS,AAAD,EAAE;YACR,IAAI,aAAa,OAAO,CAAC,kBAAkB;gBACzC,IACE,SAAS,QAAQ,KAAK,SACtB,SAAS,QAAQ,CAAC,UAAU,CAAC;oBAE7B,IAAI,OAAO,OAAO,EAChB,SAAS,CAAC,IAAI,EAAE,OAAO,OAAO,CAAC,EAAE,CAAC;yBAElC,SAAS;uBAEN,IAAI,SAAS,QAAQ,CAAC,UAAU,CAAC,YAAY;oBAClD,MAAM,MAAM,SAAS,QAAQ,CAAC,KAAK,CAAC;oBACpC,IAAI,IAAI,MAAM,IAAI,GAChB,SAAS;yBACJ,IAAI,IAAI,MAAM,KAAK,GACxB,SAAS,SAAS,QAAQ,GAAG;gBAEjC,OACE,IAAI,CAAA,GAAA,wBAAW,AAAD,KACZ,SAAS;qBAET,SAAS;YAGf,OACE,SAAS;QAEb;QAEA,qBAAO,2BAAC,CAAA,GAAA,gBAAO,AAAD;;;;;IAChB;AACF;;;;;+CC7Ba;+CA0CA;4CAoBA;8CAmEA;AA5Ib;AAOA;AAIO,MAAM,YAAY;IACvB,IAAI;IACJ,MAAM;IACN,QAAQ;IACR,QAAQ;QAAE,SAAS;IAAG;IACtB,aAAa;IACb,IAAI;IACJ,aAAa;IACb,YAAY;IACZ,QAAQ;QACN,IAAI;QACJ,MAAM;QACN,OAAO,EAAE;IACX;AACF;AA4BO,MAAM,YAAY;IACvB,IAAI;IACJ,MAAM;IACN,KAAK;IACL,UAAU;IACV,OAAO,CAAC;AACV;AAEA,MAAM,YAAY;IAChB,IAAI;IACJ,UAAU;AACZ;AAEA,MAAM,SAAS;IACb,WAAW;IACX,SAAS;IACT,kBAAkB;IAClB,kBAAkB;AACpB;AAEO,MAAM,SAAS;IACpB,oBAAoB;IACpB,OAAO;QAAE,IAAI;QAAI,MAAM;IAAM;IAC7B,OAAO,CAAC;IACR,YAAY;QACV,MAAM,EAAE;QAKR,KAAK;IACP;IACA,MAAM;QAAE,IAAI;QAAI,SAAS;QAAI,SAAS;QAAa,IAAI;IAAY;IACnE,IAAI,WAAU;QACZ,IAAI,OAAO,SAAS,KAAK,OACvB,OAAO,SAAS,GAAG,aAAa,OAAO,CAAC,sBAAsB;QAEhE,OAAO,OAAO,SAAS,IAAI;IAC7B;IACA,IAAI,SAAQ,IAAa;QACvB,aAAa,OAAO,CAAC,mBAAmB,OAAO;QAC/C,OAAO,SAAS,GAAG,OAAO;IAC5B;IACA,IAAI,WAAU;QACZ,IAAI,OAAO,OAAO,KAAK,OACrB,OAAO,OAAO,GAAG,aAAa,OAAO,CAAC,oBAAoB;QAE5D,OAAO,OAAO,OAAO,IAAI;IAC3B;IACA,IAAI,SAAQ,IAAa;QACvB,aAAa,OAAO,CAAC,iBAAiB,OAAO;QAC7C,OAAO,OAAO,GAAG,OAAO;IAC1B;IACA,UAAU;QACR,IAAI,WAAU;YACZ,IAAI,OAAO,gBAAgB,KAAK,OAC9B,OAAO,gBAAgB,GACrB,aAAa,OAAO,CAAC,6BAA6B;YAEtD,OAAO,OAAO,gBAAgB,IAAI;QACpC;QACA,IAAI,SAAQ,IAAa;YACvB,aAAa,OAAO,CAAC,0BAA0B,OAAO;YACtD,OAAO,gBAAgB,GAAG,OAAO;QACnC;QACA,IAAI,WAAU;YACZ,IAAI,OAAO,gBAAgB,KAAK,OAC9B,OAAO,gBAAgB,GACrB,aAAa,OAAO,CAAC,6BAA6B;YAEtD,OAAO,OAAO,gBAAgB,IAAI;QACpC;QACA,IAAI,SAAQ,IAAa;YACvB,aAAa,OAAO,CAAC,0BAA0B,OAAO;YACtD,OAAO,gBAAgB,GAAG,OAAO;QACnC;IACF;AACF;AAUO,MAAM,WAAW;IACtB,MAAM;IACN,MAAM;QAAE,IAAI;QAAI,UAAU;QAAI,WAAW;IAAG;IAC5C,SAAS,CAAC;IACV,QAAQ;IAQR,SAAS;QACP,WAAW,IAAI;QACf,aAAa,CAAA,GAAA,oBAAY,AAAD;QACxB,YAAY,CAAC;QACb,YAAY,CAAC;IAIf;IACA,MAAM;IACN,MAAM,CAAA,GAAA,mBAAS,AAAD,EAAE;IAChB,aAAa,KAAK,GAAG;IACrB,cAAc,CAAC;IACf,UAAU;IACV,gBAAgB,CAAC;IACjB,YAAY;IACZ,QAAQ;QACN,YAAY,CAAC;QACb,QAAQ;QACR,SAAS,OAAO,QAAgB,OAAmB;QACnD,IAAI;QACJ,KAAK;QACL,mBAAmB,CAAC;IACtB;IACA,MAAM;QACJ,SAAS;YACP,IAAI;YACJ,MAAM;QACR;QACA,SAAS;QACT,KAAK;QACL,KAAK;QACL,MAAM,CAAC;QASP,UAAU;QACV,MAAM,CAAC;QACP,OAAO,EAAE;QACT,MAAM,EAAE;QACR,QAAQ,KAAO;IACjB;IACA,MAAM;QACJ,KAAK;QACL,MAAM;QACN,QAAQ,CAAC;QACT,MAAM,CAAC;QACP,OAAO,CAAC;IACV;IACA,MAAM,CAAC;IACP,aAAa,EAAE;IACf,IAAI;QACF,QAAQ;YAAE,QAAQ,EAAE;YAAoC,QAAQ;QAAE;QAClE,OAAO;YAAE,QAAQ;QAAyC;QAC1D,QAAQ;QACR,eAAe,aAAa,OAAO,CAAC,2BAA2B;QAC/D,MAAM,aAAa,IAAI,IAAI;QAC3B,MAAM;YAAE,MAAM;QAAK;QACnB,QAAQ;YACN,MAAM,SAAS,aAAa,OAAO,CAAC,wBAAwB;YAC5D,OAAO,SAAS,aAAa,OAAO,CAAC,yBAAyB;QAChE;QACA,qBAAqB;QACrB,SAAS;QACT,MAAM;YACJ,cAAc,EAAE;YAChB,QAAQ;YACR,YAAY;YACZ,aAAa;gBACX,MAAM;gBACN,IAAI;gBACJ,MAAM;gBACN,KAAK;YACP;YACA,WAAW;YACX,UAAU;YACV,MAAM,CAAC;QACT;QACA,OAAO;YACL,MAAM;gBACJ,SAAS;gBACT,MAAM;gBACN,QAAQ;oBACN,OAAO;oBACP,SAAS;oBACT,OAAO;gBACT;gBACA,MAAM;gBACN,UAAU,KAAK,KAAK,CAClB,aAAa,OAAO,CAAC,0BAA0B;gBAEjD,OAAO,CAAC;gBACR,UAAU,IAAI;gBAEd,QAAQ;gBAKR,eAAe;gBACf,qBAAqB;gBAKrB,MAAM,EAAE;gBACR,eAAe;gBACf,eAAe;gBACf,qBAAqB;gBAKrB,SAAS;gBACT,QAAQ;oBACN,SAAS;oBACT,UAAU,CAAC;gBACb;YACF;YACA,MAAM;gBACJ,MAAM;gBACN,MAAM;gBACN,MAAM;gBACN,KAAK;gBACL,SAAS;gBACT,YAAY;gBACZ,gBAAgB;gBAMhB,OAAO;gBACP,UAAU;gBACV,MAAM,CAAC;YACT;YACA,MAAM;gBACJ,MAAM;gBACN,MAAM;YACR;YACA,QAAQ;gBACN,MAAM;gBACN,MAAM;gBACN,UAAU;gBACV,MAAM;gBACN,WAAW;gBACX,WAAW;gBACX,UAAU,KAAO;gBACjB,SAAS;oBAAE,QAAQ;oBAAoC,SAAS;gBAAG;gBACnE,WAAW,KAAO;YACpB;YACA,MAAM;YACN,WAAW;YAOX,MAAM;gBACJ,YAAY;gBACZ,MAAM;gBACN,QAAQ;YACV;YACA,YAAY;YAKZ,KAAK;gBAAE,MAAM;YAAM;QACrB;IACF;AACF","sources":["src/base/page/all.tsx","src/nova/ed/logic/ed-global.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { page, useGlobal } from \"web-utils\";\nimport { EDGlobal } from \"../../nova/ed/logic/ed-global\";\nimport { isLocalhost } from \"../../utils/ui/is-localhost\";\nimport { Loading } from \"../../utils/ui/loading\";\n\nexport default page({\n  url: \"**\",\n  component: ({}) => {\n    const p = useGlobal(EDGlobal, \"EDITOR\");\n    useEffect(() => {\n      if (localStorage.getItem(\"prasi-session\")) {\n        if (\n          location.pathname === \"/ed\" ||\n          location.pathname.startsWith(\"/ed/\")\n        ) {\n          if (params.site_id) {\n            navigate(`/ed/${params.site_id}/_`);\n          } else {\n            navigate(\"/ed/_/_\");\n          }\n        } else if (location.pathname.startsWith(\"/editor\")) {\n          const arr = location.pathname.split(\"/\");\n          if (arr.length <= 2) {\n            navigate(\"/ed/_/_\");\n          } else if (arr.length === 3) {\n            navigate(location.pathname + \"/\");\n          }\n        } else {\n          if (isLocalhost()) {\n            navigate(\"/ed\");\n          } else {\n            navigate(\"/ed/_/_\");\n          }\n        }\n      } else {\n        navigate(\"/login\");\n      }\n    });\n\n    return <Loading />;\n  },\n});\n","import { NodeModel } from \"@minoru/react-dnd-treeview\";\nimport { page } from \"dbgen\";\nimport { deepClone } from \"web-utils\";\nimport type { SAction } from \"../../../../../srv/ws/sync/actions\";\nimport type { parseJs } from \"../../../../../srv/ws/sync/editor/parser/parse-js\";\nimport { clientStartSync } from \"../../../utils/sync/ws-client\";\nimport { IItem } from \"../../../utils/types/item\";\nimport { DCode, DComp, DPage, IRoot } from \"../../../utils/types/root\";\nimport { GenMetaP, IMeta as LogicMeta } from \"../../vi/utils/types\";\nimport { createRouter } from \"radix3\";\nimport { FEntry } from \"../panel/file/type\";\nexport type IMeta = LogicMeta;\n\nexport const EmptySite = {\n  id: \"\",\n  name: \"\",\n  domain: \"\",\n  config: { api_url: \"\" },\n  deploy_name: \"\",\n  js: \"\",\n  js_compiled: \"\",\n  responsive: \"\" as \"desktop-only\" | \"mobile-only\" | \"responsive\",\n  layout: {\n    id: \"--\",\n    meta: undefined as void | Record<string, IMeta>,\n    entry: [] as string[],\n  },\n};\n\nexport type ESite = typeof EmptySite;\nexport type EPage = typeof EmptyPage;\nexport type EComp = typeof EmptyComp;\nexport type PropFieldKind =\n  | \"onChange\"\n  | \"visible\"\n  | \"gen\"\n  | \"value\"\n  | \"option\"\n  | \"typings\";\nexport type ISingleScope = {\n  p: string[];\n  n: string;\n  s: null | Exclude<ReturnType<typeof parseJs>, undefined>;\n};\nexport type IScope = Record<string, ISingleScope>;\n\nexport type IScopeComp = Record<\n  string,\n  {\n    id: string;\n    name: string;\n    snapshot: Uint8Array;\n    scope: IScope;\n  }\n>;\nexport const EmptyPage = {\n  id: \"\",\n  name: \"\",\n  url: \"\",\n  snapshot: null as null | Uint8Array,\n  comps: {} as Record<string, EComp>,\n};\n\nconst EmptyComp = {\n  id: \"\",\n  snapshot: null as null | Uint8Array,\n};\n\nconst target = {\n  active_id: false as any,\n  comp_id: false as any,\n  instance_comp_id: false as any,\n  instance_item_id: false as any,\n};\n\nexport const active = {\n  should_render_main: true,\n  hover: { id: \"\", tree: false },\n  scope: {} as any,\n  script_nav: {\n    list: [] as {\n      item_id: string;\n      comp_id?: string;\n      instance?: { item_id: string; comp_id?: string };\n    }[],\n    idx: -1,\n  },\n  text: { id: \"\", content: \"\", timeout: null as any, el: null as any },\n  get item_id() {\n    if (target.active_id === false) {\n      target.active_id = localStorage.getItem(\"prasi-active-id\") || \"\";\n    }\n    return target.active_id || \"\";\n  },\n  set item_id(val: string) {\n    localStorage.setItem(\"prasi-active-id\", val || \"\");\n    target.active_id = val || \"\";\n  },\n  get comp_id() {\n    if (target.comp_id === false) {\n      target.comp_id = localStorage.getItem(\"prasi-comp-id\") || \"\";\n    }\n    return target.comp_id || \"\";\n  },\n  set comp_id(val: string) {\n    localStorage.setItem(\"prasi-comp-id\", val || \"\");\n    target.comp_id = val || \"\";\n  },\n  instance: {\n    get comp_id() {\n      if (target.instance_comp_id === false) {\n        target.instance_comp_id =\n          localStorage.getItem(\"prasi-instance-comp-id\") || \"\";\n      }\n      return target.instance_comp_id || \"\";\n    },\n    set comp_id(val: string) {\n      localStorage.setItem(\"prasi-instance-comp-id\", val || \"\");\n      target.instance_comp_id = val || \"\";\n    },\n    get item_id() {\n      if (target.instance_item_id === false) {\n        target.instance_item_id =\n          localStorage.getItem(\"prasi-instance-item-id\") || \"\";\n      }\n      return target.instance_item_id || \"\";\n    },\n    set item_id(val: string) {\n      localStorage.setItem(\"prasi-instance-item-id\", val || \"\");\n      target.instance_item_id = val || \"\";\n    },\n  },\n};\n\nexport type CompListItem = {\n  comp: EComp;\n  doc: DComp;\n  tree: NodeModel<IMeta>[];\n  meta: Record<string, IMeta>;\n  on_update: (bin: Uint8Array, origin: any) => Promise<void>;\n};\n\nexport const EDGlobal = {\n  mode: \"\" as \"desktop\" | \"mobile\",\n  user: { id: \"\", username: \"\", client_id: \"\" },\n  clients: {} as Record<string, { id: string; username: string }>,\n  status: \"init\" as\n    | \"init\"\n    | \"load-site\"\n    | \"reload\"\n    | \"site-not-found\"\n    | \"page-not-found\"\n    | \"ready\"\n    | \"no-site\",\n  preview: {\n    url_cache: new Set<string>(),\n    route_cache: createRouter<{ url: string; id: string }>(),\n    page_cache: {} as Record<string, { root: IRoot; url: string }>,\n    meta_cache: {} as Record<\n      string,\n      { entry: string[]; meta: Record<string, IMeta>; url: string }\n    >,\n  },\n  sync: undefined as undefined | Awaited<ReturnType<typeof clientStartSync>>,\n  site: deepClone(EmptySite),\n  site_tstamp: Date.now(),\n  site_exports: {} as Record<string, any>,\n  site_dts: \"\",\n  site_dts_entry: {} as any,\n  prisma_ext: \"\",\n  script: {\n    site_types: {} as Record<string, string>,\n    loaded: false,\n    do_edit: async (newval: string, all?: boolean) => {},\n    db: null as any,\n    api: null as any,\n    init_local_effect: {} as Record<string, boolean>,\n  },\n  page: {\n    history: {\n      id: \"\",\n      show: false,\n    },\n    root_id: \"root\",\n    cur: EmptyPage,\n    doc: null as null | DPage,\n    list: {} as Record<\n      string,\n      {\n        page: EPage;\n        doc: DPage;\n        on_update?: (bin: Uint8Array, origin: any) => Promise<void>;\n        update_timeout: any;\n      }\n    >,\n    building: false,\n    meta: {} as Record<string, IMeta>,\n    entry: [] as string[],\n    tree: [] as NodeModel<IMeta>[],\n    render: () => {},\n  },\n  comp: {\n    doc: null as null | DComp,\n    item: null as null | IItem,\n    loaded: {} as GenMetaP[\"comps\"],\n    list: {} as Record<string, CompListItem>,\n    group: {} as Record<string, Awaited<ReturnType<SAction[\"comp\"][\"group\"]>>>,\n  },\n  code: {} as Record<string, { doc: null | DCode }>,\n  global_prop: [] as string[],\n  ui: {\n    deploy: { target: [] as { name: string; id: string }[], active: 0 },\n    build: { status: \"ready\" as \"ready\" | \"loading\" | \"error\" },\n    monaco: null as any,\n    comp_editable: localStorage.getItem(\"prasi-comp-editable\") === \"yes\",\n    zoom: localStorage.zoom || \"100%\",\n    side: { prop: true },\n    layout: {\n      left: parseInt(localStorage.getItem(\"prasi-layout-left\") || \"250\"),\n      right: parseInt(localStorage.getItem(\"prasi-layout-right\") || \"250\"),\n    },\n    prevent_indent_hook: false,\n    syncing: false,\n    tree: {\n      item_loading: [] as string[],\n      search: \"\",\n      search_ref: null as null | HTMLInputElement,\n      search_mode: {\n        Name: true,\n        JS: false,\n        HTML: false,\n        CSS: false,\n      },\n      rename_id: \"\",\n      open_all: false,\n      open: {} as Record<string, string[]>,\n    },\n    popup: {\n      file: {\n        enabled: false,\n        open: false,\n        picker: {\n          value: \"\",\n          on_pick: false as boolean | ((file: string) => void | Promise<void>),\n          multi: false,\n        },\n        path: \"/\",\n        expanded: JSON.parse(\n          localStorage.getItem(\"panel-file-expanded\") || \"{}\"\n        ) as Record<string, string[]>,\n        entry: {} as Record<string, FEntry[]>,\n        selected: new Set<string>(),\n\n        action: null as null | {\n          label: string;\n          submit: () => void | Promise<void>;\n        },\n\n        file_renaming: \"\",\n        file_ctx_menu_event: null as null | React.MouseEvent<\n          HTMLElement,\n          MouseEvent\n        >,\n\n        tree: [] as NodeModel<FEntry>[],\n        tree_renaming: \"\",\n        tree_ctx_path: \"\",\n        tree_ctx_menu_event: null as null | React.MouseEvent<\n          HTMLElement,\n          MouseEvent\n        >,\n\n        preview: true,\n        upload: {\n          started: false,\n          progress: {} as Record<string, number>,\n        },\n      },\n      code: {\n        init: false,\n        open: false,\n        name: \"site\",\n        log: \"\",\n        loading: false,\n        rebuilding: false,\n        startup_status: \"init\" as\n          | \"init\"\n          | \"loading\"\n          | \"disabled\"\n          | \"stopped\"\n          | \"running\",\n        error: false,\n        show_log: false,\n        list: {} as Record<string, string>,\n      },\n      page: {\n        open: null as null | ((page_id: string) => void),\n        form: null as null | Partial<page>,\n      },\n      script: {\n        open: false,\n        mode: \"js\" as \"js\" | \"css\" | \"html\",\n        lastMode: \"js\" as \"js\" | \"css\" | \"html\",\n        type: \"item\" as \"item\" | \"prop-master\" | \"prop-instance\" | \"comp-types\",\n        prop_kind: \"\" as PropFieldKind,\n        prop_name: \"\",\n        on_close: () => {},\n        typings: { status: \"ok\" as \"ok\" | \"loading\" | \"error\", err_msg: \"\" },\n        wb_render: () => {},\n      },\n      site: null as null | ((site_id: string) => void | Promise<void>),\n      site_form: null as null | {\n        group_id: string;\n        id: string;\n        name?: string;\n        domain?: string;\n        responsive?: string;\n      },\n      comp: {\n        preview_id: \"\",\n        open: null as null | ((comp_id: string) => void | Promise<void>),\n        import: false,\n      },\n      comp_group: null as null | {\n        mouse_event: React.MouseEvent<HTMLElement, MouseEvent>;\n        on_pick?: (group_id: string) => void | Promise<void>;\n        on_close?: () => void | Promise<void>;\n      },\n      api: { open: false },\n    },\n  },\n};\n\nexport type PG = typeof EDGlobal & { render: () => void };\n"],"names":[],"version":3,"file":"all.8cf772a3.js.map","sourceRoot":"../app/web/"}